@App:name("tracing-app")
@App:description("VICK Tracing Siddhi App for processing and storing trace spans")

@source(type="tracing-receiver", host="0.0.0.0", port="9411", api.context="/api/v1/spans",
        @map(type="keyvalue", fail.on.missing.attribute="false"))
define stream ZipkinStreamIn (traceId string, id string, parentId string, name string, serviceName string,
                              kind string, timestamp long, duration long, tags string);

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn (sourceNamespace string, sourceCell string, sourceVICKService string,
                                 sourcePod string, destinationNamespace string, destinationCell string,
                                 destinationVICKService string, destinationPod string, contextReporterKind string,
                                 requestHeadersMap object, requestPath string, requestMethod string,
                                 requestSizeBytes long, responseCode long, responseDurationNanoSec int,
                                 responseSizeBytes long);

@Store(type="rdbms", datasource="VICK_OBSERVABILITY_DB", field.length="tags:8000")
@PrimaryKey("traceId", "spanId", "kind")
define table DistributedTracingTable (traceId string, spanId string, parentId string, namespace string, cell string,
                                      serviceName string, pod string, operationName string, kind string,
                                      startTime long, duration long, tags string);

define function extractFromServiceName[javascript] return string {
    var serviceName = data[0];
    var index = data[1];    // 1: cell, 2: service

    var cellGatewayMatches = /^src:\d+\.\d+\.\d+\.(.+)_\d+_\d+_\d+_.+$/.exec(serviceName);
    var mircoserviceMatches = /^(.+)--(.+)$/.exec(serviceName);

    var extractedData = "";
    if (cellGatewayMatches) {
        var cell = cellGatewayMatches[1];
        if (index == 1) {
            extractedData = cell;
        } else if (index == 2) {
            extractedData = "gateway";
        }
    } else if (mircoserviceMatches) {
        extractedData = mircoserviceMatches[index];
    }

    // Handling service names that does not match any of the regexes
    if (!extractedData && index == 2) {
        extractedData = serviceName;
    }
    return extractedData.replace(/_/g, "-");
};

--
-- Storing Zipkin data received for Tracing
--

from ZipkinStreamIn
select
    traceId,
    id as spanId,
    parentId,
    "" as namespace,
    extractFromServiceName(serviceName, 1) as cell,
    extractFromServiceName(serviceName, 2) as serviceName,
    "" as pod,
    name as operationName,
    kind,
    timestamp as startTime,
    duration,
    tags
insert into ProcessedZipkinStream;

from ProcessedZipkinStream#tracing:dependencyTree(cell, serviceName, operationName, spanId, parentId, kind, tags)
select *
update or insert into DistributedTracingTable
    set DistributedTracingTable.parentId = parentId, DistributedTracingTable.operationName = operationName,
        DistributedTracingTable.startTime = startTime, DistributedTracingTable.duration = duration,
        DistributedTracingTable.tags = tags
    on DistributedTracingTable.traceId == traceId and DistributedTracingTable.spanId == spanId
        and DistributedTracingTable.kind == kind;

--
-- Filling additional data from Telemetry
--

-- Extracting information for local service
from TelemetryStreamIn
select
    requestHeadersMap,
    ifThenElse(contextReporterKind == "inbound", "SERVER", "CLIENT") as kind,
    ifThenElse(contextReporterKind == "inbound", destinationNamespace, sourceNamespace) as namespace,
    ifThenElse(contextReporterKind == "inbound", destinationCell, sourceCell) as cell,
    ifThenElse(contextReporterKind == "inbound", destinationVICKService, sourceVICKService) as serviceName,
    ifThenElse(contextReporterKind == "inbound", destinationPod, sourcePod) as pod
insert into ProcessedTelemetryDataStream;

-- Extracting information for remote service
from TelemetryStreamIn
select
    requestHeadersMap,
    ifThenElse(contextReporterKind == "inbound", "CLIENT", "SERVER") as kind,
    ifThenElse(contextReporterKind == "inbound", sourceNamespace, destinationNamespace) as namespace,
    ifThenElse(contextReporterKind == "inbound", sourceCell, destinationCell) as cell,
    ifThenElse(contextReporterKind == "inbound", sourceVICKService, destinationVICKService) as serviceName,
    ifThenElse(contextReporterKind == "inbound", sourcePod, destinationPod) as pod
insert into ProcessedTelemetryDataStream;

from ProcessedTelemetryDataStream[(not serviceName is null) and (serviceName != "")]
select
    cast(map:get(requestHeadersMap, "x-b3-traceid"), "string") as traceId,
    cast(map:get(requestHeadersMap, "x-b3-spanid"), "string") as spanId,
    "" as parentId,
    namespace,
    ifThenElse(cell is null, extractFromServiceName(serviceName, 1), cell) as cell,
    extractFromServiceName(serviceName, 2) as serviceName,
    pod,
    "" as operationName,
    kind,
    0L as startTime,
    0L as duration,
    "{}" as tags
insert into ExtractedTelemetryDataStream;

from every(e1=ExtractedTelemetryDataStream) ->
    not ExtractedTelemetryDataStream[e1.traceId == e2.traceId and e1.spanId == e2.spanId and e1.kind == e2.kind] for 1 minute
    or e2=ExtractedTelemetryDataStream[e1.traceId == e2.traceId and e1.spanId == e2.spanId and e1.kind == e2.kind] within 1 minute
select
    e1.traceId,
    e1.spanId,
    e1.parentId,
    ifThenElse(e1.namespace is null, e2.namespace, e1.namespace) as namespace,
    ifThenElse(e1.cell is null, e2.cell, e1.cell) as cell,
    ifThenElse(e1.serviceName is null, e2.serviceName, e1.serviceName) as serviceName,
    ifThenElse(e1.pod is null, e2.pod, e1.pod) as pod,
    e1.operationName,
    e1.kind,
    e1.startTime,
    e1.duration,
    e1.tags
insert into UniqueTelemetryDataStream;

from UniqueTelemetryDataStream[(not traceId is null) and (not spanId is null)]
update or insert into DistributedTracingTable
    set DistributedTracingTable.namespace = namespace, DistributedTracingTable.cell = cell,
        DistributedTracingTable.serviceName = serviceName, DistributedTracingTable.pod = pod
    on DistributedTracingTable.traceId == traceId and DistributedTracingTable.spanId == spanId
        and DistributedTracingTable.kind == kind;
